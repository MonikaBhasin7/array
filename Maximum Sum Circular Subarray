class Solution {
public:
    int kadane(vector<int>&A)
    {
      int i,j;
      //find max subarray sum using Kadane's algorithm
      int max_so_far=INT_MIN;
      int max_ending_here=0;
      for(i=0;i<A.size();i++)
      {
        max_ending_here=max_ending_here+A[i];
        if(max_ending_here>max_so_far)
        {
          max_so_far=max_ending_here;
        }
        if(max_ending_here<0)
        {
          max_ending_here=0;
        }
      }
      return max_so_far;
    }
    int maxSubarraySumCircular(vector<int>& A) {
      int i,j;
      
      int non_circular_sum=kadane(A);
      int maximum=INT_MIN;
      for(i=0;i<A.size();i++)
      {
        if(A[i]>=0)
        {
          break;
        }
        maximum=max(A[i],maximum);
      }
      if(i>=A.size())
      {
        return maximum;
      }
      
      //reverse the sign
      int sum=0;
      for(i=0;i<A.size();i++)
      {
        A[i]=-1*A[i];
        sum=sum+A[i];
      }
      
      int circular_sum=kadane(A);
      
      circular_sum=(sum-circular_sum)*-1;
      return max(non_circular_sum,circular_sum);
        
    }
};
