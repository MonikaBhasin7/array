/*There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if:  (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

 

Example 1:

Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 
Example 2:

Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.
Example 3:

Input: rating = [1,2,3,4]
Output: 4
 

Constraints:

n == rating.length
1 <= n <= 200
1 <= rating[i] <= 10^5*/


class Solution {
public:
    int numTeams(vector<int>& rating) {
        int i,j;
        
        int total=0;
        int n=rating.size();
        vector<int>left_small(rating.size(),0);
        vector<int>right_large(rating.size(),0);
        vector<int>right_small(rating.size(),0);
        vector<int>left_large(rating.size(),0);
        
        left_small[0]=0;
        left_large[0]=0;
        for(i=1;i<rating.size();i++)
        {
            for(j=0;j<=i-1;j++)
            {
                if(rating[j]<rating[i])
                {
                    left_small[i]=left_small[i]+1;
                }
                if(rating[j]>rating[i])
                {
                    left_large[i]=left_large[i]+1;
                }
            }
        }
        
        right_large[n-1]=0;
        right_small[n-1]=0;
        for(i=n-2;i>=0;i--)
        {
            for(j=i+1;j<rating.size();j++)
            {
                if(rating[j]<rating[i])
                {
                    right_small[i]=right_small[i]+1;
                }
                if(rating[j]>rating[i])
                {
                    right_large[i]=right_large[i]+1;
                }
            }
        }
        
        for(i=0;i<n;i++)
        {
            total=total+(left_small[i]*right_large[i]+left_large[i]*right_small[i]);
        }
        return total;
    }
};
